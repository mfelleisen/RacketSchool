Conduct regular understanding survey:

The pace was [*required]
- Too slow
- A bit slow
- Just right
- A bit fast
- Too fast

Concepts I wish were explained again
[ ... ]

======================================================================

Mon AM:

Instead of starting off with a language with terms like (lam (x) e), use a language with made-up names. It's hard for people to dissociate (lam (x) e) from its common semantic connotation, and in particular interpet "lam" to mean a lambda, which implies x is bound in e, etc. Whereas at this point we have only uninterpreted syntax, so these connotations are invalid — they have to actually be *defined*.

Why start with the conventional LC presentation? Why not start with an actual directed reduction relation — a programming language; then motivate the value of an equational theory (sometimes we might want to go in the opposite order from "reduction", e.g., in an IDE or compiler); and from there work out to an equational theory?

======================================================================
